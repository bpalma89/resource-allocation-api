// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  username  String    @unique
  name      String
  passwordHash String
  email     String?   @unique
  role      String
  created_on DateTime @default(now())
  modified_on DateTime?

  createdProjects  Project[]      @relation("ProjectCreatedBy")
  modifiedProjects Project[]      @relation("ProjectModifiedBy")

  createdPositions Position[]     @relation("PositionCreatedBy")
  modifiedPositions Position[]    @relation("PositionModifiedBy")

  createdResources Resource[]     @relation("ResourceCreatedBy")
  modifiedResources Resource[]    @relation("ResourceModifiedBy")

  createdAllocations Allocation[] @relation("AllocationCreatedBy")
  modifiedAllocations Allocation[] @relation("AllocationModifiedBy")
}

model Project {
  id          String      @id @default(uuid())
  name        String
  description String?
  start_date  DateTime
  end_date    DateTime
  status      String
  created_on  DateTime    @default(now())
  modified_on DateTime?
  is_deleted  Boolean     @default(false)

  createdById String
  createdBy   User        @relation("ProjectCreatedBy", fields: [createdById], references: [id])

  modifiedById String?
  modifiedBy   User?      @relation("ProjectModifiedBy", fields: [modifiedById], references: [id])

  positions   Position[]
}

model Position {
  id                String       @id @default(uuid())
  projectId         String
  project           Project      @relation(fields: [projectId], references: [id])
  title             String
  description       String?
  role              String
  numberOfResources Int
  start_date        DateTime
  end_date          DateTime
  created_on        DateTime     @default(now())
  modified_on       DateTime?
  is_deleted        Boolean      @default(false)

  createdById String
  createdBy   User        @relation("PositionCreatedBy", fields: [createdById], references: [id])

  modifiedById String?
  modifiedBy   User?      @relation("PositionModifiedBy", fields: [modifiedById], references: [id])

  allocations       Allocation[]
}

model Resource {
  id             String       @id @default(uuid())
  first_name     String
  last_name      String
  birth_date     DateTime
  role           String
  availability   String
  cv_uri         String
  cv_modified_on DateTime
  created_on     DateTime     @default(now())
  modified_on    DateTime?
  is_deleted     Boolean      @default(false)

  createdById String
  createdBy   User        @relation("ResourceCreatedBy", fields: [createdById], references: [id])

  modifiedById String?
  modifiedBy   User?      @relation("ResourceModifiedBy", fields: [modifiedById], references: [id])

  allocations    Allocation[]
}

model Allocation {
  positionId     String
  resourceId     String
  status         String
  start_date     DateTime
  end_date       DateTime
  created_on     DateTime     @default(now())
  modified_on    DateTime?
  is_deleted     Boolean      @default(false)

  position       Position     @relation(fields: [positionId], references: [id])
  resource       Resource     @relation(fields: [resourceId], references: [id])

  createdById String
  createdBy   User        @relation("AllocationCreatedBy", fields: [createdById], references: [id])

  modifiedById String?
  modifiedBy   User?      @relation("AllocationModifiedBy", fields: [modifiedById], references: [id])

  @@id([positionId, resourceId]) // Composite primary key
}
